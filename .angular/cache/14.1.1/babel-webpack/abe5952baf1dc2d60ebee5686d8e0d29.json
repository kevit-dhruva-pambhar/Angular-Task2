{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.generateApiKey = void 0;\n\nconst chance_1 = __importDefault(require(\"chance\"));\n\nconst uuid_1 = require(\"uuid\");\n\nconst crypto_1 = require(\"crypto\");\n\nconst rfc4648_1 = require(\"rfc4648\");\n\nconst base_x_1 = __importDefault(require(\"base-x\"));\n\nconst types_1 = require(\"./types\");\n\nconst utils_1 = require(\"./utils\");\n\nconst constants_1 = require(\"./constants\");\n/**\n * Creates an API key using random bytes.\n *\n * @param options API key options.\n * @returns The API key.\n */\n\n\nconst getCryptoApiKey = options => {\n  let totalBytes;\n  let apiKey; // Get the options.\n\n  options = (0, utils_1.getOptions)(options, {\n    min: constants_1.DEFAULT_MIN_LENGTH,\n    max: constants_1.DEFAULT_MAX_LENGTH\n  }); // Get a 'Chance' instance.\n\n  const chance = new chance_1.default();\n\n  if (options.length) {\n    totalBytes = Math.ceil(options.length / 2);\n  } else {\n    // Get a random number.\n    const numVal = chance.natural({\n      min: options.min,\n      max: options.max\n    }); // Set the total bytes.\n\n    totalBytes = Math.ceil(numVal / 2);\n  } // Generate the API key.\n\n\n  apiKey = (0, crypto_1.randomBytes)(totalBytes).toString('hex'); // Check the key length.\n\n  if (options.length && apiKey.length > options.length) {\n    const endIndex = apiKey.length - (apiKey.length - options.length);\n    apiKey = apiKey.slice(0, endIndex);\n  } else if (apiKey.length > options.max) {\n    const endIndex = apiKey.length - (apiKey.length - options.max);\n    apiKey = apiKey.slice(0, endIndex);\n  }\n\n  return apiKey;\n};\n/**\n * Creates an API key using random string generation.\n *\n * @param options API key options.\n * @returns The API key.\n */\n\n\nconst getRandomStringApiKey = options => {\n  var _a; // Get the options.\n\n\n  options = (0, utils_1.getOptions)(options, {\n    min: constants_1.DEFAULT_MIN_LENGTH,\n    max: constants_1.DEFAULT_MAX_LENGTH,\n    pool: constants_1.DEFAULT_CHARACTER_POOL\n  }); // Get a 'Chance' instance.\n\n  const chance = new chance_1.default(); // Determine the length for the key.\n\n  const length = (_a = options.length) !== null && _a !== void 0 ? _a : chance.natural({\n    min: options.min,\n    max: options.min\n  }); // Generate the string.\n\n  return chance.string({\n    length,\n    pool: options.pool\n  });\n};\n/**\n * Creates an API key using Base32 Crockford encoding.\n *\n * @param options API key options.\n * @returns The API key.\n */\n\n\nconst getBase32CrockfordApiKey = options => {\n  // Get the options.\n  options = (0, utils_1.getOptions)(options, {\n    dashes: true\n  }); // Create the uuid options.\n\n  const v4options = {\n    random: (0, crypto_1.randomBytes)(16)\n  }; // Create a new UUID.\n\n  const uuid = (0, uuid_1.v4)(v4options); // Split at the dashes.\n\n  const uuidParts = uuid.split('-'); // Convert the UUID into 4 equally separate parts.\n\n  const partsArr = [uuidParts[0], `${uuidParts[1]}${uuidParts[2]}`, `${uuidParts[3]}${uuidParts[4].substring(0, 4)}`, uuidParts[4].substring(4)]; // Iterate through each part.\n\n  const apiKeyArr = partsArr.map(value => {\n    // Get every two characters.\n    const valueArr = value.match(/.{1,2}/g); // Convert each value into a number.\n\n    const numArr = valueArr.map(item => Number(`0x${item}`)); // Create the string.\n\n    return rfc4648_1.base32.stringify(numArr, {\n      pad: false\n    });\n  }); // Check if we should add dashes.\n\n  return options.dashes ? apiKeyArr.join('-') : apiKeyArr.join('');\n};\n/**\n * Creates an API key using Base62 encoding.\n *\n * @returns The API key.\n */\n\n\nconst getBase62ApiKey = () => {\n  // Create the uuid options.\n  const v4options = {\n    random: (0, crypto_1.randomBytes)(16)\n  }; // Set the encoding alphabet for Base62.\n\n  const base62 = (0, base_x_1.default)(constants_1.BASE62_CHAR_POOL); // Create a new UUID.\n\n  const uuid = (0, uuid_1.v4)(v4options); // Create the UUID buffer.\n\n  const uuidBuffer = Buffer.from(uuid.replace(/-/g, ''), 'hex'); // Generate the API key.\n\n  return base62.encode(uuidBuffer);\n};\n/**\n * Creates an API key using random UUID Version 4 generation.\n *\n * @param options API key options.\n * @returns The API key.\n */\n\n\nconst getUuidV4ApiKey = options => {\n  // Get the options.\n  options = (0, utils_1.getOptions)(options, {\n    dashes: true\n  }); // Create the uuid options.\n\n  const v4options = {\n    random: (0, crypto_1.randomBytes)(16)\n  }; // Generate the API key.\n\n  const apiKey = (0, uuid_1.v4)(v4options); // Check if we should remove dashes.\n\n  return !options.dashes ? apiKey.replace(/-/g, '') : apiKey;\n};\n/**\n * Creates an API key using random UUID Version 5 generation.\n *\n * @param options API key options.\n * @returns The API key.\n */\n\n\nconst getUuidV5ApiKey = options => {\n  // Get the options.\n  options = (0, utils_1.getOptions)(options, {\n    dashes: true\n  });\n\n  if (!(0, utils_1.isString)(options.name)) {\n    throw new TypeError(`The required 'name' option must be a string.`);\n  }\n\n  if (!options.batch) {\n    if (!(0, utils_1.isString)(options.namespace)) {\n      throw new TypeError(`The required 'namespace' option must be a string.`);\n    }\n\n    if (!(0, uuid_1.validate)(options.namespace)) {\n      throw new Error(`The required 'namespace' option must be a valid UUID.`);\n    }\n  } // Create the uuid options.\n\n\n  const v4options = {\n    random: (0, crypto_1.randomBytes)(16)\n  };\n  /*\n   * Get the namespace. When using batch processing\n   * create a namespace UUID. A namespace must be unique.\n   */\n\n  const namespace = options.batch ? (0, uuid_1.v4)(v4options) : options.namespace; // Generate the API key.\n\n  const apiKey = (0, uuid_1.v5)(options.name, namespace); // Check if we should remove dashes.\n\n  return !options.dashes ? apiKey.replace(/-/g, '') : apiKey;\n};\n/**\n * Generates a simple API key or a batch of API keys based on\n * the provided generation method.\n *\n * @param options The API key generation options.\n * @returns The API key or array of API keys.\n */\n\n\nconst generateApiKey = (options = {}) => {\n  var _a; // Get the generation method.\n\n\n  const genMethod = (_a = options.method) !== null && _a !== void 0 ? _a : 'string'; // Check for a valid generation method.\n\n  if (!types_1.generationMethods.includes(genMethod)) {\n    throw new Error('Received an unknown API key generation method.');\n  } // Check for batch generation.\n\n\n  if (options.batch) {\n    if (!(0, utils_1.isNaturalNum)(options.batch)) {\n      throw new TypeError(`The 'batch' option must be a natural number > 0.`);\n    }\n  } else if (options.batch === 0) {\n    throw new TypeError(`The 'batch' option must be a natural number > 0.`);\n  } // An object literal for creating the API key.\n\n\n  const getApiKey = method => ({\n    base62: () => getBase62ApiKey(),\n    base32: () => getBase32CrockfordApiKey(options),\n    bytes: () => getCryptoApiKey(options),\n    string: () => getRandomStringApiKey(options),\n    uuidv4: () => getUuidV4ApiKey(options),\n    uuidv5: () => getUuidV5ApiKey(options)\n  })[method]; // Check for batch generation.\n\n\n  if (options.batch) {\n    // Generate the keys.\n    const apiKeys = [...Array(options.batch)].map(() => {\n      // Generate the API key.\n      const apiKey = getApiKey(genMethod)(); // Add a prefix if necessary.\n\n      return options.prefix ? `${options.prefix}.${apiKey}` : apiKey;\n    });\n    return apiKeys;\n  } else {\n    // Generate the API key.\n    const apiKey = getApiKey(genMethod)(); // Add a prefix if necessary.\n\n    return options.prefix ? `${options.prefix}.${apiKey}` : apiKey;\n  }\n};\n\nexports.generateApiKey = generateApiKey;\nexports.default = exports.generateApiKey;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","generateApiKey","chance_1","require","uuid_1","crypto_1","rfc4648_1","base_x_1","types_1","utils_1","constants_1","getCryptoApiKey","options","totalBytes","apiKey","getOptions","min","DEFAULT_MIN_LENGTH","max","DEFAULT_MAX_LENGTH","chance","default","length","Math","ceil","numVal","natural","randomBytes","toString","endIndex","slice","getRandomStringApiKey","_a","pool","DEFAULT_CHARACTER_POOL","string","getBase32CrockfordApiKey","dashes","v4options","random","uuid","v4","uuidParts","split","partsArr","substring","apiKeyArr","map","valueArr","match","numArr","item","Number","base32","stringify","pad","join","getBase62ApiKey","base62","BASE62_CHAR_POOL","uuidBuffer","Buffer","from","replace","encode","getUuidV4ApiKey","getUuidV5ApiKey","isString","name","TypeError","batch","namespace","validate","Error","v5","genMethod","method","generationMethods","includes","isNaturalNum","getApiKey","bytes","uuidv4","uuidv5","apiKeys","Array","prefix"],"sources":["/home/dhruva/Dhruva/Angular-Task2/node_modules/generate-api-key/dist/generate_api_key.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.generateApiKey = void 0;\nconst chance_1 = __importDefault(require(\"chance\"));\nconst uuid_1 = require(\"uuid\");\nconst crypto_1 = require(\"crypto\");\nconst rfc4648_1 = require(\"rfc4648\");\nconst base_x_1 = __importDefault(require(\"base-x\"));\nconst types_1 = require(\"./types\");\nconst utils_1 = require(\"./utils\");\nconst constants_1 = require(\"./constants\");\n/**\n * Creates an API key using random bytes.\n *\n * @param options API key options.\n * @returns The API key.\n */\nconst getCryptoApiKey = (options) => {\n    let totalBytes;\n    let apiKey;\n    // Get the options.\n    options = (0, utils_1.getOptions)(options, {\n        min: constants_1.DEFAULT_MIN_LENGTH,\n        max: constants_1.DEFAULT_MAX_LENGTH,\n    });\n    // Get a 'Chance' instance.\n    const chance = new chance_1.default();\n    if (options.length) {\n        totalBytes = Math.ceil(options.length / 2);\n    }\n    else {\n        // Get a random number.\n        const numVal = chance.natural({ min: options.min, max: options.max });\n        // Set the total bytes.\n        totalBytes = Math.ceil(numVal / 2);\n    }\n    // Generate the API key.\n    apiKey = (0, crypto_1.randomBytes)(totalBytes).toString('hex');\n    // Check the key length.\n    if (options.length && (apiKey.length > options.length)) {\n        const endIndex = apiKey.length - (apiKey.length - options.length);\n        apiKey = apiKey.slice(0, endIndex);\n    }\n    else if (apiKey.length > options.max) {\n        const endIndex = apiKey.length - (apiKey.length - options.max);\n        apiKey = apiKey.slice(0, endIndex);\n    }\n    return apiKey;\n};\n/**\n * Creates an API key using random string generation.\n *\n * @param options API key options.\n * @returns The API key.\n */\nconst getRandomStringApiKey = (options) => {\n    var _a;\n    // Get the options.\n    options = (0, utils_1.getOptions)(options, {\n        min: constants_1.DEFAULT_MIN_LENGTH,\n        max: constants_1.DEFAULT_MAX_LENGTH,\n        pool: constants_1.DEFAULT_CHARACTER_POOL,\n    });\n    // Get a 'Chance' instance.\n    const chance = new chance_1.default();\n    // Determine the length for the key.\n    const length = (_a = options.length) !== null && _a !== void 0 ? _a : chance.natural({\n        min: options.min,\n        max: options.min\n    });\n    // Generate the string.\n    return chance.string({ length, pool: options.pool });\n};\n/**\n * Creates an API key using Base32 Crockford encoding.\n *\n * @param options API key options.\n * @returns The API key.\n */\nconst getBase32CrockfordApiKey = (options) => {\n    // Get the options.\n    options = (0, utils_1.getOptions)(options, { dashes: true });\n    // Create the uuid options.\n    const v4options = {\n        random: (0, crypto_1.randomBytes)(16),\n    };\n    // Create a new UUID.\n    const uuid = (0, uuid_1.v4)(v4options);\n    // Split at the dashes.\n    const uuidParts = uuid.split('-');\n    // Convert the UUID into 4 equally separate parts.\n    const partsArr = [\n        uuidParts[0],\n        `${uuidParts[1]}${uuidParts[2]}`,\n        `${uuidParts[3]}${uuidParts[4].substring(0, 4)}`,\n        uuidParts[4].substring(4),\n    ];\n    // Iterate through each part.\n    const apiKeyArr = partsArr.map((value) => {\n        // Get every two characters.\n        const valueArr = value.match(/.{1,2}/g);\n        // Convert each value into a number.\n        const numArr = valueArr.map((item) => Number(`0x${item}`));\n        // Create the string.\n        return rfc4648_1.base32.stringify(numArr, { pad: false });\n    });\n    // Check if we should add dashes.\n    return (options.dashes) ? apiKeyArr.join('-') : apiKeyArr.join('');\n};\n/**\n * Creates an API key using Base62 encoding.\n *\n * @returns The API key.\n */\nconst getBase62ApiKey = () => {\n    // Create the uuid options.\n    const v4options = {\n        random: (0, crypto_1.randomBytes)(16),\n    };\n    // Set the encoding alphabet for Base62.\n    const base62 = (0, base_x_1.default)(constants_1.BASE62_CHAR_POOL);\n    // Create a new UUID.\n    const uuid = (0, uuid_1.v4)(v4options);\n    // Create the UUID buffer.\n    const uuidBuffer = Buffer.from(uuid.replace(/-/g, ''), 'hex');\n    // Generate the API key.\n    return base62.encode(uuidBuffer);\n};\n/**\n * Creates an API key using random UUID Version 4 generation.\n *\n * @param options API key options.\n * @returns The API key.\n */\nconst getUuidV4ApiKey = (options) => {\n    // Get the options.\n    options = (0, utils_1.getOptions)(options, { dashes: true });\n    // Create the uuid options.\n    const v4options = {\n        random: (0, crypto_1.randomBytes)(16),\n    };\n    // Generate the API key.\n    const apiKey = (0, uuid_1.v4)(v4options);\n    // Check if we should remove dashes.\n    return (!options.dashes) ? apiKey.replace(/-/g, '') : apiKey;\n};\n/**\n * Creates an API key using random UUID Version 5 generation.\n *\n * @param options API key options.\n * @returns The API key.\n */\nconst getUuidV5ApiKey = (options) => {\n    // Get the options.\n    options = (0, utils_1.getOptions)(options, { dashes: true });\n    if (!(0, utils_1.isString)(options.name)) {\n        throw new TypeError(`The required 'name' option must be a string.`);\n    }\n    if (!options.batch) {\n        if (!(0, utils_1.isString)(options.namespace)) {\n            throw new TypeError(`The required 'namespace' option must be a string.`);\n        }\n        if (!(0, uuid_1.validate)(options.namespace)) {\n            throw new Error(`The required 'namespace' option must be a valid UUID.`);\n        }\n    }\n    // Create the uuid options.\n    const v4options = {\n        random: (0, crypto_1.randomBytes)(16),\n    };\n    /*\n     * Get the namespace. When using batch processing\n     * create a namespace UUID. A namespace must be unique.\n     */\n    const namespace = (options.batch)\n        ? (0, uuid_1.v4)(v4options)\n        : options.namespace;\n    // Generate the API key.\n    const apiKey = (0, uuid_1.v5)(options.name, namespace);\n    // Check if we should remove dashes.\n    return (!options.dashes) ? apiKey.replace(/-/g, '') : apiKey;\n};\n/**\n * Generates a simple API key or a batch of API keys based on\n * the provided generation method.\n *\n * @param options The API key generation options.\n * @returns The API key or array of API keys.\n */\nconst generateApiKey = (options = {}) => {\n    var _a;\n    // Get the generation method.\n    const genMethod = (_a = options.method) !== null && _a !== void 0 ? _a : 'string';\n    // Check for a valid generation method.\n    if (!types_1.generationMethods.includes(genMethod)) {\n        throw new Error('Received an unknown API key generation method.');\n    }\n    // Check for batch generation.\n    if (options.batch) {\n        if (!(0, utils_1.isNaturalNum)(options.batch)) {\n            throw new TypeError(`The 'batch' option must be a natural number > 0.`);\n        }\n    }\n    else if (options.batch === 0) {\n        throw new TypeError(`The 'batch' option must be a natural number > 0.`);\n    }\n    // An object literal for creating the API key.\n    const getApiKey = (method) => ({\n        base62: () => getBase62ApiKey(),\n        base32: () => getBase32CrockfordApiKey(options),\n        bytes: () => getCryptoApiKey(options),\n        string: () => getRandomStringApiKey(options),\n        uuidv4: () => getUuidV4ApiKey(options),\n        uuidv5: () => getUuidV5ApiKey(options),\n    })[method];\n    // Check for batch generation.\n    if (options.batch) {\n        // Generate the keys.\n        const apiKeys = [...Array(options.batch)].map(() => {\n            // Generate the API key.\n            const apiKey = getApiKey(genMethod)();\n            // Add a prefix if necessary.\n            return (options.prefix)\n                ? `${options.prefix}.${apiKey}`\n                : apiKey;\n        });\n        return apiKeys;\n    }\n    else {\n        // Generate the API key.\n        const apiKey = getApiKey(genMethod)();\n        // Add a prefix if necessary.\n        return (options.prefix) ? `${options.prefix}.${apiKey}` : apiKey;\n    }\n};\nexports.generateApiKey = generateApiKey;\nexports.default = exports.generateApiKey;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}