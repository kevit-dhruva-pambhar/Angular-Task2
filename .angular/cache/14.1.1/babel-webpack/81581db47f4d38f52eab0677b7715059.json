{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getOptions = exports.isNaturalNum = exports.isString = void 0;\n/**\n * Checks for a string value.\n *\n * @param value The value to check.\n * @returns Whether the value is a string or not.\n */\n\nconst isString = value => {\n  return typeof value === 'string' || value instanceof String;\n};\n\nexports.isString = isString;\n/**\n * Checks for a natural number.\n *\n * @param value The value to check.\n * @returns Whether the value is a natural number or not.\n */\n\nconst isNaturalNum = value => {\n  // Check the type.\n  if (typeof value !== 'number') {\n    return false;\n  } else {\n    return value >= 0.0 ? Math.floor(value) === value && value !== Infinity : false;\n  }\n};\n\nexports.isNaturalNum = isNaturalNum;\n/**\n * Gets the options for the generation method. Uses\n * default values if certain options are missing.\n *\n * @param options The provided options.\n * @param defaults The default options.\n * @returns The modified options.\n */\n\nconst getOptions = (options, defaults) => {\n  return Object.assign({}, defaults, options);\n};\n\nexports.getOptions = getOptions;","map":{"version":3,"names":["Object","defineProperty","exports","value","getOptions","isNaturalNum","isString","String","Math","floor","Infinity","options","defaults","assign"],"sources":["/home/dhruva/Dhruva/Angular-Task2/node_modules/generate-api-key/dist/utils.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getOptions = exports.isNaturalNum = exports.isString = void 0;\n/**\n * Checks for a string value.\n *\n * @param value The value to check.\n * @returns Whether the value is a string or not.\n */\nconst isString = (value) => {\n    return (typeof value === 'string' || value instanceof String);\n};\nexports.isString = isString;\n/**\n * Checks for a natural number.\n *\n * @param value The value to check.\n * @returns Whether the value is a natural number or not.\n */\nconst isNaturalNum = (value) => {\n    // Check the type.\n    if (typeof value !== 'number') {\n        return false;\n    }\n    else {\n        return (value >= 0.0)\n            ? (Math.floor(value) === value) && value !== Infinity\n            : false;\n    }\n};\nexports.isNaturalNum = isNaturalNum;\n/**\n * Gets the options for the generation method. Uses\n * default values if certain options are missing.\n *\n * @param options The provided options.\n * @param defaults The default options.\n * @returns The modified options.\n */\nconst getOptions = (options, defaults) => {\n    return Object.assign({}, defaults, options);\n};\nexports.getOptions = getOptions;\n"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,UAAR,GAAqBF,OAAO,CAACG,YAAR,GAAuBH,OAAO,CAACI,QAAR,GAAmB,KAAK,CAApE;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMA,QAAQ,GAAIH,KAAD,IAAW;EACxB,OAAQ,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,YAAYI,MAAtD;AACH,CAFD;;AAGAL,OAAO,CAACI,QAAR,GAAmBA,QAAnB;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMD,YAAY,GAAIF,KAAD,IAAW;EAC5B;EACA,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;IAC3B,OAAO,KAAP;EACH,CAFD,MAGK;IACD,OAAQA,KAAK,IAAI,GAAV,GACAK,IAAI,CAACC,KAAL,CAAWN,KAAX,MAAsBA,KAAvB,IAAiCA,KAAK,KAAKO,QAD1C,GAED,KAFN;EAGH;AACJ,CAVD;;AAWAR,OAAO,CAACG,YAAR,GAAuBA,YAAvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMD,UAAU,GAAG,CAACO,OAAD,EAAUC,QAAV,KAAuB;EACtC,OAAOZ,MAAM,CAACa,MAAP,CAAc,EAAd,EAAkBD,QAAlB,EAA4BD,OAA5B,CAAP;AACH,CAFD;;AAGAT,OAAO,CAACE,UAAR,GAAqBA,UAArB"},"metadata":{},"sourceType":"script"}